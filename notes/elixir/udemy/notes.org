* Repo: https://github.com/StephenGrider/ElixirCode
* Section 1
Mix
  - create, compiles projects.
  - run tasks
  - manage dependencies

Module
  -> collection of different methods or funcions
  `defmodule`
    -> will create a module

iex
  -> interactive elixir shell

`implicit return`
  -> returns the last value in the function

Functional vs. OOP
OOP
  [[file:images/cards-OO.png]]
  [[file:images/cards-OO-2.png]]
  -> Class has its own local collection
  -> calling a method of the class operates on that class' local collection
FP
  [[file:images/cards-FP.png]]
  -> No concept of class or instance of class
  -> only modules

arity
  -> number of arguments that a function accepts

Enum
  -> module for working with list of data

Immutability
  -> copy over mutate existing data

Comprehension
  -> Mapping function
  -> Transform closed set of data

Tuple
  -> very fast because it is stored in memory
  -> modifying is slower since it will create a tuple in memory
  -> { :ok, value }
